# -*- coding: utf-8 -*-
"""Lógica de programação - 30 de Maio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-cPRcRELm6es6mKGihKDQA5DAt8I8hkH

# Compilado das atividades de Lógica de Programação

# As anotações originais encontram-se no notebook do Colab e foram convertidas 
# para um arquivo .py com o intuito de submeter ao repositório de estudos no GitHub
# Todos os códigos funcionam perfeitamente no Colab.

# Lógica de Programação com Python
"""

import matplotlib.pyplot as plt
from random import randrange, seed
nome = "Luiza"
idade = 20

print('O nome é:', nome, '\nA idade é:', idade)

nome

idade

print(f'O nome é {nome} e a idade é {idade}')

idade = 22

print(f'O nome é {nome} e a idade é {idade}')


"""# Criando minha primeira função"""


def saudacao():
    nome = input('Qual o seu nome?\t')
    print(f'\nOlá, {nome}!')


saudacao()


def saudacao():
    nome = input('Qual o seu nome? ')
    print(f'Seja bem-vindo(a), {nome}!')


saudacao()

nome = 'Lucas'


def saudacao_com_parametros(nome_da_pessoa):
    print(f'Olá, {nome_da_pessoa}!')


saudacao_com_parametros(nome)

idade = 22


def verifica_se_pode_dirigir(idade):
    if idade >= 18:
        print('Tem permissão para dirigir.')


verifica_se_pode_dirigir(idade)

idade = 12


def verifica_se_pode_dirigir(idade):
    if idade >= 18:
        print('Tem permissão para dirigir.')
    else:
        print('Não tem permissão para dirigir.')


verifica_se_pode_dirigir(idade)

"""# Convertendo tipo para inteiro"""


def verifica_se_pode_dirigir_sem_parametros():
    idade = input('Qual a sua idade? ')
    idade = int(idade)
    if idade >= 18:
        print('Tem permissão para dirigir.')
    else:
        print('Não tem permissão para dirigir.')


verifica_se_pode_dirigir_sem_parametros()


def velocidade(espaco, tempo):
    v = espaco / tempo
    print(f'Velocidade: {v} m/s')


velocidade(100, 20)

"""# Lista"""

idades = [12, 15, 22, 30]
#         0    1   2   3
#         0   -3  -2  -1
type(idades)

idades[2]

idades[0:2]

idades[0:3]

idades[1:]

idades[-1]  # pegar o último elemento

idades[-2]


"""# Laços e Loops"""

idades

# for fora da função


def verifica_se_pode_dirigir(idade):
    if idade >= 18:
        print(f'{idade} anos de idade, TEM permissão para dirigir')
    else:
        print(f'{idade} anos de idade, NÃO tem permissão para dirigir')


# para cada idade na nossa lista -> lista = idades
for idade in idades:
    verifica_se_pode_dirigir(idade)

# for dentro da função


def verifica_se_pode_dirigir(idades):
    for idade in idades:
        if idade >= 18:
            print(f'{idade} anos de idade, TEM permissão para dirigir')
        else:
            print(f'{idade} anos de idade, NÃO tem permissão para dirigir')


verifica_se_pode_dirigir(idades)

"""# Tipo booleano"""

idade = 18
idade >= 18

idade = 15
idade >= 18

permissoes = []
idades = [20, 14, 40]


def verifica_se_pode_dirigir(idades, permissoes):
    for idade in idades:
        if idade >= 18:
            permissoes.append(True)
        else:
            permissoes.append(False)


verifica_se_pode_dirigir(idades, permissoes)

permissoes

for permissao in permissoes:
    if permissao == True:
        print('Tem permissão para dirigir')
    else:
        print('Não tem permissão para dirigir')

frase_alura = [' Digitais', 'e ', 'Negócios ', 'de ', 'Tecnologia ', 'Cursos ']
#                  -6       -5       -4         -3          -2           -1
#                   0        1        2          3           4            5

frase_alura[-1] + frase_alura[-3] + frase_alura[-2] + frase_alura[1] + frase_alura[2] + frase_alura[0]
frase_alura[5] + frase_alura[3] + frase_alura[4] + frase_alura[1] + frase_alura[2] + frase_alura[0]
frase_alura[-1] + frase_alura[-3] + frase_alura[-2] + frase_alura[-5] + frase_alura[-4] + frase_alura[-6]


a = 2

if a < 2:
    a = a + 1
else:
    a = a + 2
if a < 4:
    a = a - 4
else:
    a = a + 6

a


"""# Tipos em uma lista"""

lista = ['Luiza', 22, True, '20']

for elemento in lista:
    print(f'O elemento {elemento} é do tipo: ', type(elemento))


"""# Imports"""


seed(10)

randrange(0, 11)

notas_matematica = []

for notas in range(8):
    notas_matematica.append(randrange(0, 11))

notas_matematica

len(notas_matematica)


"""# Matplotlib"""


x = list(range(1, 9))
x

y = notas_matematica
y

plt.plot(x, y, marker='o')  # o marker adiciona as bolinhas
plt.title('Notas de Matemática')
plt.xlabel('Provas')
plt.ylabel('Notas')
plt.show()

notas_matematica


"""### Atividade Extra"""


notas_matematica = ['Matemática', 8, 7, 6, 6, 7, 7, 8, 10]
notas_portugues = ['Português', 9, 9, 9, 8, 5, 6, 8, 5]
notas_geografia = ['Geografia', 10, 10, 6, 7, 7, 7, 8, 7]

notas = [notas_matematica, notas_portugues, notas_geografia]

for nota in notas:
    x = list(range(1, 9))
    y = nota[1:]
    plt.plot(x, y, marker='o')
    plt.xlabel('Provas')
    plt.ylabel('Notas')
    plt.title(nota[0])
    plt.show()


"""**Lógica de Programação - Python para Data Science** *(Alura)*


Início: 30 de Maio de 2022
Conclusão: 30 de Maio de 2022
"""
